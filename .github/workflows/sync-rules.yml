# WhereGroup Knowledge Base Sync
# Automatischer w√∂chentlicher Sync von COPILOT_ESSENTIALS.md ‚Üí .github/copilot-instructions.md
# 
# RULE 1 Dimension 1 (Make Available): Stellt sicher dass Copilot immer aktuelle Regeln hat
# RULE 3 Dimension 2 (Monitor): L√§uft w√∂chentlich + manuell triggerbar
#
# Quelle: https://github.com/fhaefker/wheregroup-knowledge-base/COPILOT_ESSENTIALS.md
# Ziel: .github/copilot-instructions.md (von GitHub Copilot automatisch gelesen)

name: Sync WhereGroup Rules to Copilot

on:
  schedule:
    # Jeden Montag um 00:00 UTC
    - cron: '0 0 * * 1'
  
  workflow_dispatch:
    # Manueller Trigger √ºber GitHub Actions UI
  
  push:
    branches:
      - main
    paths:
      - '.github/workflows/sync-rules.yml'
      # Trigger wenn Workflow selbst ge√§ndert wird

jobs:
  sync-rules:
    runs-on: ubuntu-latest
    
    permissions:
      contents: write
      # Ben√∂tigt Schreibrechte f√ºr Commit
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          # Shallow clone ausreichend
      
      - name: Download WhereGroup Rules from Knowledge Base
        id: download
        run: |
          echo "üì• Downloading COPILOT_ESSENTIALS.md from wheregroup-knowledge-base..."
          
          # Try GitHub Raw URL first
          HTTP_CODE=$(curl -s -w "%{http_code}" -o /tmp/copilot-essentials.md \
            https://raw.githubusercontent.com/fhaefker/wheregroup-knowledge-base/main/COPILOT_ESSENTIALS.md)
          
          if [ "$HTTP_CODE" -eq 200 ]; then
            echo "‚úÖ Download via Raw URL erfolgreich (HTTP $HTTP_CODE)"
            cp /tmp/copilot-essentials.md COPILOT_ESSENTIALS.md
          else
            echo "‚ùå Raw URL fehlgeschlagen (HTTP $HTTP_CODE)"
            echo "üîÑ Fallback: Clone Repository..."
            
            # Fallback: Clone repository
            git clone --depth=1 --single-branch --branch=main \
              https://github.com/fhaefker/wheregroup-knowledge-base.git /tmp/kb
            
            if [ -f "/tmp/kb/COPILOT_ESSENTIALS.md" ]; then
              cp /tmp/kb/COPILOT_ESSENTIALS.md COPILOT_ESSENTIALS.md
              echo "‚úÖ Download via Git Clone erfolgreich"
            else
              echo "‚ùå RULE 1 VIOLATION: COPILOT_ESSENTIALS.md nicht gefunden!"
              exit 1
            fi
          fi
          
          echo "downloaded=true" >> $GITHUB_OUTPUT
      
      - name: Verify File Integrity (RULE 2 - Never Lie)
        if: steps.download.outputs.downloaded == 'true'
        run: |
          # Pr√ºfe ob Datei mindestens 600 Zeilen hat (Schutz gegen versehentliches L√∂schen)
          LINES=$(wc -l < COPILOT_ESSENTIALS.md)
          echo "üìä COPILOT_ESSENTIALS.md: $LINES Zeilen"
          
          if [ "$LINES" -lt 600 ]; then
            echo "‚ùå RULE 1 VIOLATION: Datei zu klein ($LINES Zeilen < 600 erwartet)"
            echo "‚ùå M√∂glicher Wissensverlust detektiert - Sync abgebrochen"
            exit 1
          fi
          
          # Pr√ºfe ob kritische Schl√ºsselw√∂rter vorhanden sind
          if ! grep -q "RULE 1" COPILOT_ESSENTIALS.md || \
             ! grep -q "RULE 2" COPILOT_ESSENTIALS.md || \
             ! grep -q "RULE 3" COPILOT_ESSENTIALS.md || \
             ! grep -q "RULE 4" COPILOT_ESSENTIALS.md || \
             ! grep -q "RULE 5" COPILOT_ESSENTIALS.md; then
            echo "‚ùå RULE 1 VIOLATION: Kritische Regeln fehlen in COPILOT_ESSENTIALS.md"
            exit 1
          fi
          
          echo "‚úÖ Integrit√§tspr√ºfung bestanden"
      
      - name: Create .github directory if not exists
        run: |
          mkdir -p .github
          echo "‚úÖ .github/ Verzeichnis bereit"
      
      - name: Copy COPILOT_ESSENTIALS.md to copilot-instructions.md
        run: |
          cp COPILOT_ESSENTIALS.md .github/copilot-instructions.md
          echo "‚úÖ Kopiert: COPILOT_ESSENTIALS.md ‚Üí .github/copilot-instructions.md"
      
      - name: Verify Sync Success (RULE 2 - Never Lie)
        run: |
          if [ ! -f ".github/copilot-instructions.md" ]; then
            echo "‚ùå Sync fehlgeschlagen - Datei nicht erstellt"
            exit 1
          fi
          
          SOURCE_LINES=$(wc -l < COPILOT_ESSENTIALS.md)
          TARGET_LINES=$(wc -l < .github/copilot-instructions.md)
          
          if [ "$SOURCE_LINES" -ne "$TARGET_LINES" ]; then
            echo "‚ùå RULE 1 VIOLATION: Zeilenanzahl unterschiedlich"
            echo "   Quelle: $SOURCE_LINES Zeilen"
            echo "   Ziel:   $TARGET_LINES Zeilen"
            exit 1
          fi
          
          echo "‚úÖ Sync erfolgreich: $SOURCE_LINES Zeilen synchronisiert"
      
      - name: Check for changes
        id: check-changes
        run: |
          git diff --quiet .github/copilot-instructions.md || echo "changed=true" >> $GITHUB_OUTPUT
      
      - name: Commit and Push (RULE 1 Dimension 3 - Persist)
        if: steps.check-changes.outputs.changed == 'true'
        run: |
          SOURCE_LINES=$(wc -l < COPILOT_ESSENTIALS.md)
          
          git config user.name "WhereGroup Rules Sync Bot"
          git config user.email "actions@github.com"
          
          git add .github/copilot-instructions.md
          
          git commit -m "chore: Sync WhereGroup Rules to Copilot Instructions

‚úÖ RULE 1 (Never Forget): Knowledge persisted
‚úÖ RULE 2 (Never Lie): Integrity verified ($SOURCE_LINES lines)
‚úÖ RULE 3 (Never Crash): Automated weekly sync

Source: https://github.com/fhaefker/wheregroup-knowledge-base/COPILOT_ESSENTIALS.md
Target: .github/copilot-instructions.md
Sync Time: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          
          git push
          echo "‚úÖ √Ñnderungen committed und gepusht"
      
      - name: No Changes Detected
        if: steps.check-changes.outputs.changed != 'true'
        run: |
          echo "‚ÑπÔ∏è  Keine √Ñnderungen - .github/copilot-instructions.md bereits aktuell"
      
      - name: Summary
        if: always()
        run: |
          echo "üìã WhereGroup Rules Sync Zusammenfassung"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "üìÖ Zeitpunkt: $(date -u +"%Y-%m-%d %H:%M:%S UTC")"
          echo "‚úÖ RULE 1 Compliance: Knowledge preserved"
          echo "‚úÖ RULE 2 Compliance: Integrity verified"
          echo "‚úÖ RULE 3 Compliance: Automated monitoring"
          
          if [ -f ".github/copilot-instructions.md" ]; then
            LINES=$(wc -l < .github/copilot-instructions.md)
            CHARS=$(wc -c < .github/copilot-instructions.md)
            echo "üìä Copilot Instructions: $LINES Zeilen, $CHARS Zeichen"
          fi
